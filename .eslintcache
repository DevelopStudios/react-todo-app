[{"/Users/charlroux/Desktop/internal/react-todo-app/src/index.js":"1","/Users/charlroux/Desktop/internal/react-todo-app/src/App.js":"2","/Users/charlroux/Desktop/internal/react-todo-app/src/reportWebVitals.js":"3","/Users/charlroux/Desktop/internal/react-todo-app/src/containers/TodoWrapper/TodoWrapper.js":"4","/Users/charlroux/Desktop/internal/react-todo-app/src/components/TaskForm/TaskForm.js":"5","/Users/charlroux/Desktop/internal/react-todo-app/src/components/EntryForm/EntryForm.js":"6"},{"size":500,"mtime":1612443356909,"results":"7","hashOfConfig":"8"},{"size":1808,"mtime":1612443646201,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1612443356909,"results":"10","hashOfConfig":"8"},{"size":6493,"mtime":1612524917940,"results":"11","hashOfConfig":"8"},{"size":3637,"mtime":1612525502474,"results":"12","hashOfConfig":"8"},{"size":2179,"mtime":1612525085359,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1krhzkp",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/charlroux/Desktop/internal/react-todo-app/src/index.js",[],["28","29"],"/Users/charlroux/Desktop/internal/react-todo-app/src/App.js",["30"],"import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoWrapper from \"./containers/TodoWrapper/TodoWrapper\";\nimport background from \"./assets/day.jpg\";\nimport backgroundNight from \"./assets/night.jpg\";\nfunction App() {\n  const [mode, setMode] = useState(false);\n  const [modeState, setModeState] = useState(\"day\");\n  const [backgroundState, setBackgroundState] = useState(background);\n  let [tasks, updateTasks] = useState([]);\n  const [filterState, setFilterState] = useState('All');\n  function updateMode() {\n    setMode(!mode);\n  }\n\n  function addTask(event) {\n    let cloneDB = [...tasks]\n    cloneDB.push(event);\n    updateTasks(cloneDB)\n  }\n\n  function removeTask(index) {\n    let cloneDB = [...tasks]\n    cloneDB.splice(index,1);\n    updateTasks(cloneDB);\n  }\n  \n  function clearTasks() {\n    updateTasks([]);\n  }\n\n  function toggleDone(index) {\n    let cloneDB = [...tasks]\n    cloneDB[index].done === true\n      ? (cloneDB[index].done = false)\n      : (cloneDB[index].done = true);\n    updateTasks(cloneDB);\n  }\n\n  useEffect(()=>{\n   mode === true ? setModeState(\"night\") : setModeState(\"day\");\n   mode === true\n     ? setBackgroundState(backgroundNight)\n     : setBackgroundState(background);\n  })\n\n  return (\n    <div className={\"AppWrapper \" + modeState}>\n      <div\n        className=\"banner\"\n        style={{ backgroundImage: `url(${backgroundState})` }}\n      ></div>\n      <TodoWrapper\n        mode={mode}\n        test={updateMode}\n        tasks={tasks}\n        pushTask={(event) => addTask(event)}\n        removeTask={(event) => removeTask(event)}\n        clearTasks = {clearTasks}\n        toggleDone = {(event) => toggleDone(event)}\n        filterState = {filterState}\n        setFilter = {(event)=>setFilterState(event)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/charlroux/Desktop/internal/react-todo-app/src/reportWebVitals.js",[],"/Users/charlroux/Desktop/internal/react-todo-app/src/containers/TodoWrapper/TodoWrapper.js",["31","32"],"/Users/charlroux/Desktop/internal/react-todo-app/src/components/TaskForm/TaskForm.js",["33"],"/Users/charlroux/Desktop/internal/react-todo-app/src/components/EntryForm/EntryForm.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":3,"nodeType":"40","endLine":40,"endColumn":12,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":27,"nodeType":"40","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"42","severity":1,"message":"45","line":8,"column":9,"nodeType":"40","messageId":"44","endLine":8,"endColumn":20},{"ruleId":"46","severity":1,"message":"47","line":13,"column":36,"nodeType":"48","messageId":"49","endLine":13,"endColumn":38},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setModeState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [mode] as a second argument to the useEffect Hook.","Identifier",["52"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar","'taskAmmount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Add dependencies array: [mode]",{"range":"55","text":"56"},[1226,1226],", [mode]"]